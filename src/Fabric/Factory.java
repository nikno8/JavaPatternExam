package Fabric;

// Фабрика
class Factory {
    public static Product createProduct(String name) {
        if (name.equals("product1")) {
            return new ConcreteProduct1();
        } else if (name.equals("product2")) {
            return new ConcreteProduct2();
        } else {
            return null;
        }
    }
}

//        Паттерн Фабрика (Factory) - это порождающий паттерн проектирования,
//        который позволяет создавать объекты без указания конкретных классов,
//        используя общий интерфейс для создания объектов.
//
//        Основное назначение паттерна Фабрика заключается в создании объектов конкретного типа,
//        но при этом сокрытии
//        от клиента информации о конкретном классе объекта, который будет создаваться.
//        Этот паттерн следует использовать, когда требуется создать множество объектов с общей функциональностью,
//        но с разными свойствами, либо когда необходимо скрыть детали реализации создания объектов от клиента.
//
//        Отличия от паттернов Абстрактная фабрика и Фабричный метод
//        - Абстрактная фабрика (Abstract Factory): это расширенная версия паттерна Фабрика, которая позволяет
//        создавать семейства взаимосвязанных объектов с общим интерфейсом, без указания
//        конкретных классов этих объектов. То есть,
//        Абстрактная фабрика предоставляет набор фабрик, каждая из которых создает свой семейство объектов,
//        причем все эти фабрики имеют общий интерфейс. Этот паттерн следует использовать,
//        когда нужно создавать связанные объекты, которые могут меняться вместе.
//        - Фабричный метод (Factory Method): это еще один вариант паттерна Фабрика,
//        который предоставляет интерфейс
//        для создания объектов в суперклассе, но позволяет подклассам изменять тип создаваемых объектов.
//        То есть, для каждого типа объектов создается отдельный метод-фабрика в подклассах, которые
//        наследуют интерфейс суперкласса. Этот паттерн следует использовать, когда необходимо создавать объекты
//        в зависимости от условий и параметров, которые известны лишь на этапе выполнения программы.
//
//        Таким образом, паттерн Фабрика используется для создания конкретных объектов с общим интерфейсом,
//        паттерн Абстрактная фабрика расширяет его функциональность на создание семейств взаимосвязанных объектов
//        с общим интерфейсом, а паттерн Фабричный метод позволяет подклассам изменять тип создаваемых объектов.
