package Decorator;

public interface Car {
    public int getSpeed();
    public int getBaggageWeight();
}

//        Паттерн Декоратор (Decorator) - это структурный паттерн проектирования, который позволяет добавлять новую
//        функциональность к существующим объектам во время выполнения программы, не изменяя их исходный код.
//
//        Основное назначение паттерна Декоратор заключается в расширении функциональности существующих объектов без
//        изменения их исходного кода и без влияния на объекты того же класса. Этот паттерн следует использовать,
//        когда необходимо добавить новое поведение объекту, которое не предусмотрено его исходной реализацией.
//
//        Примером, когда может использоваться паттерн Декоратор, может быть ситуация, когда у нас есть базовый класс
//        реализующий некоторую функциональность, и нам нужно добавить новую функциональность без изменения его исходного кода.
//        В этом случае мы можем создать новый класс-декоратор, который будет оборачивать базовый объект и добавлять новую
//        функциональность.
